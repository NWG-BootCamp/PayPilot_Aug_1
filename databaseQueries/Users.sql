-- 1. Create the Users table based on the schema in the image
CREATE TABLE users (
    user_id VARCHAR2(50) PRIMARY KEY,
    email VARCHAR2(100) UNIQUE NOT NULL,
    password VARCHAR2(100) NOT NULL,
    pan_details VARCHAR2(20),
    bank_account_number VARCHAR2(20),
    ifsc_code VARCHAR2(11),
    banking_partner VARCHAR2(100),
    phone VARCHAR2(10) CONSTRAINT chk_phone CHECK (REGEXP_LIKE(phone, '^\d{10}$')),
    name VARCHAR2(100) NOT NULL
);

-- 2. Add address fields: city, state, pincode
-- Add CHECK constraint on state to allow only Karnataka or Tamil Nadu
ALTER TABLE users
ADD (
    city VARCHAR2(50),
    state VARCHAR2(50),
    pincode VARCHAR2(6),
    CONSTRAINT chk_state CHECK (state IN ('Karnataka', 'Tamil Nadu'))
);

-- 3. Insert 5 dummy users
INSERT INTO users (
    user_id, email, password, pan_details, bank_account_number, ifsc_code, banking_partner,
    phone, name, city, state, pincode
) VALUES (
    'U001', 'sanjay.k@example.com', 'pass123', 'ABCDE1234F', '1234567890', 'SBIN0001234', 'SBI',
    '9876543210', 'Sanjay Kumar', 'Bangalore', 'Karnataka', '560001'
);

INSERT INTO users VALUES (
    'U002', 'priya.s@example.com', 'pass456', 'AIOPG0987K', '1111222233', 'HDFC0005678', 'HDFC',
    '9123456780', 'Priya Sharma', 'Chennai', 'Tamil Nadu', '600001'
);

INSERT INTO users VALUES (
    'U003', 'amit.singh@example.com', 'pass789', 'GHYTU6789M', '2222333344', 'ICIC0003456', 'ICICI',
    '8765432109', 'Amit Singh', 'Mysore', 'Karnataka', '570001'
);

INSERT INTO users VALUES (
    'U004', 'sunita.r@example.com', 'pass321', 'UIOPT1234N', '4444555566', 'SBIN0004321', 'SBI',
    '7654321098', 'Sunita Rao', 'Bangalore', 'Karnataka', '560029'
);

INSERT INTO users VALUES (
    'U005', 'rajesh.v@example.com', 'pass654', 'XYWED5678P', '9999888877', 'AXIS0008765', 'AXIS',
    '6543210987', 'Rajesh Verma', 'Coimbatore', 'Tamil Nadu', '641001'
);

-- 4. Query to fetch usernames and masked emails
SELECT
    name,
    SUBSTR(email, 1, 3) || '***' || SUBSTR(email, INSTR(email, '@')) AS masked_email
FROM
    users;

-- 5. Alter users table to add created_at column with default SYSDATE
ALTER TABLE users
ADD created_at TIMESTAMP DEFAULT SYSDATE;

-- Optional: backfill created_at for existing users
UPDATE users SET created_at = SYSDATE WHERE created_at IS NULL;

-- 6. Query to get users whose name starts with 'S' and from Bangalore
SELECT user_id, name, city, state
FROM users
WHERE name LIKE 'S%' AND city = 'Bangalore';

-- 7. Create roles and user_roles table (1 user -> many roles)
CREATE TABLE roles (
    role_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    role_name VARCHAR2(50) UNIQUE NOT NULL
);

CREATE TABLE user_roles (
    user_id VARCHAR2(50),
    role_id NUMBER,
    CONSTRAINT pk_user_roles PRIMARY KEY (user_id, role_id),
    CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT fk_role FOREIGN KEY (role_id) REFERENCES roles(role_id) ON DELETE CASCADE
);

-- Insert roles
INSERT INTO roles (role_name) VALUES ('Admin');
INSERT INTO roles (role_name) VALUES ('Editor');
INSERT INTO roles (role_name) VALUES ('Viewer');

-- Assign roles to users
-- Sanjay Kumar → Admin + Editor
INSERT INTO user_roles (user_id, role_id)
SELECT 'U001', role_id FROM roles WHERE role_name IN ('Admin', 'Editor');

-- Priya Sharma → Viewer
INSERT INTO user_roles (user_id, role_id)
SELECT 'U002', role_id FROM roles WHERE role_name = 'Viewer';

-- Final query: View users and their roles
SELECT
    u.name,
    r.role_name
FROM
    users u
JOIN user_roles ur ON u.user_id = ur.user_id
JOIN roles r ON ur.role_id = r.role_id
ORDER BY u.name;